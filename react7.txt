
Custom Hooks
==============
Hooks which are created by the user based on the application requirement are called custom hooks.
ex:
	myCustomHook()
	customHook()
	ihubHook()
	myCustomCounter()

Project Structure
-------------------
myapp13
|
|----node_modules
|
|----public
|	|
	|----favicon.ico
	|----index.html
	|----manifest.json
|
|-----src
|	|
	|----index.js
	|----App.js
	|----CustomHook.js
|
|-----package.json 
|-----README.md


CustomHook.js
---------------
import React from 'react'
import {useState} from 'react'


function CustomHook() 
{
  
  const [count,setCount]=useState(0);

  const handleClick=()=>
  {
    setCount(count+1);
  }
  
    return(
        {
        count,
        handleClick
        })
}

export default CustomHook


App.js
--------
import React from 'react'
import customHook from './CustomHook';

function App() {

  const data=customHook();

  return (
    <div>
      <h1>Count : {data.count}</h1>
      <button onClick={data.handleClick}>Increment</button>
    </div>
  )
}

export default App




Assets/Images in ReactJS
========================
We can declare react assets/images in two places.

1) Inside public folder

2) Inside src folder 


2) Inside src folder 
--------------------

myapp14
|
|----node_modules
|
|----public
|	|
	|---favicon.ico
	|---manifest.json
	|---index.html

|-----src
	|
	|---index.js
	|---App.js 
	|	
	|---images
		|
		|---thumbnail1.jpg
		|---thumbnail2.jpg
		|---thumbnail3.jpg
|
|-----package.json
|-----README.md

step1:
-----
	Create a react project i.e myapp14.
	ex:
		reactprojects>  npx  create-react-app  myapp14

step2:
------
	Create a image folder inside "src".

step3:
-----	
	Add the images inside "src/images" folder.

step4:
------
	Goto App.js and remove the code.

step5:
------
	Add the below code in App.js file.

App.js
------
import pic1 from './images/thumbnail1.jpg';
import pic2 from './images/thumbnail2.jpg';
import pic3 from './images/thumbnail3.jpg';
function App()
{
  const imgStyle={
    width:"300px",
    height:"300px"
  }

  return (

      <>
        <img src={pic1}  style={imgStyle}/>
        <img src={pic2}  style={imgStyle}/>
        <img src={pic3}  style={imgStyle}/>
      </>
  )
}
export default App;

step6:
-----
	Switch to react project.
	ex:
		reactprojects> cd   myapp12

step7:
-----
	Run the react project.
	ex:
		reactprojects/myapp12>  npm start 


step8:
------
	Test the react application by using below request url.
	ex:
		http://localhost:3000/


React Router           
================
Routing is a process in which a user is directed to different pages based on their 
action or request.

ReactJS Router is mainly used for developing Single Page Web Applications. 

React Router is used to define multiple routes in the application. 

When a user types a specific URL into the browser, and if this URL path matches any 
'route' inside the router file, the user will be redirected to that particular route.

React Router is a standard library system built on top of the React and used to 
create routing in the React application using React Router Package.

React contains three different packages for routing.

1)react-router: 
----------------
It provides the core routing components and functions for the React Router applications.

2)react-router-native: 
--------------------
It is used for mobile applications.

3)react-router-dom: 
-------------------
It is used for web applications design.

Note:
-------
It is not possible to install react-router directly in your application. 
To use react routing, first, you need to install react-router-dom modules in your application. 


We have two types of router components.

1)<BrowserRouter>: 
-------------------
		It is used for handling the dynamic URL.
2)<HashRouter>: 
--------------
		It is used for handling the static request.


Project  structure
--------------------
myapp15
|
|------node-modules
|
|------public
|	|
|	|------favicon.ico
|	|------index.html 
|	|------manifest.json
|
|------src
	|
	|------index.js
	|------App.js  (Routing File)   
	|------Home.js
	|------About.js
	|------Contact.js
	|------Error.js
|
|------package.json
|------README.md

step1:
------
	create react "myapp15" project in VSC.
	ex:
	projects>create-react-app myapp15

step2:
--------
	Move to myapp15 project.
	ex:
	project> cd   myapp15


step3:
------
	install react router dom.
	ex:
	project/myapp15>npm install --save react-router-dom	


step4:
-------
	Restart the application .
	ex:
	myapp15> npm start


step5:
--------
	create App.js,Home.js,About.js ,Contact.js and Error.js component inside "src" folder.

App.js
-------


import Home from './Home';
import Contact from './Contact';
import About from './About';
import Error from './Error'
import { BrowserRouter, Routes, Route } from "react-router-dom";

function App() {
  return (
    <div>
       <BrowserRouter>
      <Routes>
        <Route exact path="/" element={<Home />}/>
        <Route path="/about" element={<About />}/>
        <Route path="/contact" element={<Contact />}/>
        <Route path="*" element={<Error />}/>
      </Routes>
      </BrowserRouter>
    </div>
  );
}
export default App;

Home.js
----------
function Home()
{
    return (
        <div>
          <h1>Home</h1>
       </div>
    )
}
export default Home;


About.js
---------
function About()
{
    return (
        <div>
          <h1>About</h1>
       </div>
    )
}
export default About;

Contact.js
----------
function Contact()
{
    return (
        <div>
          <h1>Contact</h1>
       </div>
    )
}
export default Contact;


Error.js
----------
function Error()
{
    return(
        <div>
            <h1>OOPS! 404 Error </h1>
        </div>
    )
}
export default Error;


step6:
------
	create index.js component to render the output inside "src" folder.

index.js
---------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';  

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>

    <App/>
    
  </React.StrictMode>
);

step7:
-------
	Test the application by using below url's.
	ex:
	http://localhost:3000/
	http://localhost:3000/home
	http://localhost:3000/about
	http://localhost:3000/contact
	http://localhost:3000/gallery
	http://localhost:3000/services
	


Adding Navigation using Link component
==========================================
A Link component is used to create links which allow to navigate on different URLs and render its content without reloading the webpage.

ex:2
-------

App.js
---------

import Home from './Home';
import Contact from './Contact';
import About from './About';
import Error from './Error'

import {Link, Routes,Route,BrowserRouter } from 'react-router-dom'  
function App() {
  return (
    <div>
      <BrowserRouter>
   
      <nav >
        <Link style={{display:"block"}} to="/">Home</Link>
        <Link style={{display:"block"}} to="/about">About Us</Link>
        <Link style={{display:"block"}} to="/contact">Contact US</Link>
      </nav>
      <Routes>
        <Route exact path="/" element={<Home />}/>
        <Route path="/about" element={<About />}/>
        <Route path="/contact" element={<Contact />}/>
        <Route path="*" element={<Error />}/>
      </Routes>
      </BrowserRouter>
    </div>
  );
}
export default App;

Home.js
-----------
function Home()
{
    return (
        <div>
          <h1>Home</h1>
       </div>
    )
}
export default Home;

About.js
------------
function About()
{
    return (
        <div>
          <h1>About</h1>
       </div>
    )
}
export default About;

Contact.js
--------------
function Contact()
{
    return (
        <div>
          <h1>Contact</h1>
       </div>
    )
}
export default Contact;


Error.js
----------
function Error()
{
    return(
        <div>
            <h1>OOPS! 404 Error </h1>
        </div>
    )
}
export default Error;


index.js
-----------
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';  

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>

    <App/>
    
  </React.StrictMode>
);









Q) Difference between function component vs class component?

function component			class component
------------------			----------------
It is also known as stateless 		It is a statefull component.
component.

In a function component we will use	In a class component we will use 
return keyword.				render() method.

It supports hooks.			It does not support hooks.

Constructor is not used.		Constructor is used.

ex:					ex:
						import {Component} from 'react';
	function App				export default class App extends Component
	{					{
		return (				render()
		<h1> Hello </h1>			{
		)						return (
	}								<h1>Hello</h1>
	export default App;						)	
							}
						}


Q)Difference between real dom vs virtual dom ?

Real dom 				virtual dom 
-----------				--------------
It updates slow.			It updates faster.

Can directly updates HTML.		Can't directly updates HTML.

Creates a new dom if element updates.	Update the jsx if element updates.

DOM manipulation is very expensive.	DOM manipulation is very easy.

Too much of memory wastage.		No memory wastage.




